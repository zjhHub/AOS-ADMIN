<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- as_layer_gather[as_layer_gather]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2017-04-15 14:28:29 -->
<mapper namespace="com.chinazyjr.as.dao.As_layer_gatherDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id_" parameterType="As_layer_gatherPO">
		INSERT INTO as_layer_gather (
		<if test="level_code_ != null and level_code_ != ''">
	         level_code_, <!-- level_code_ -->
		</if>
		<if test="name_ != null and name_ != ''">
	         name_, <!-- name_ -->
		</if>
		<if test="parent_id_ != null">
	         parent_id_, <!-- parent_id_ -->
		</if>
		<if test="is_leaf_ != null">
	         is_leaf_, <!-- is_leaf_ -->
		</if>
		<if test="gather_purpose_ != null and gather_purpose_ != ''">
	         gather_purpose_, <!-- gather_purpose_ -->
		</if>
		<if test="created_by_ != null and created_by_ != ''">
	         created_by_, <!-- created_by_ -->
		</if>
		<if test="created_time_ != null and created_time_ != ''">
	         created_time_, <!-- created_time_ -->
		</if>
	          id_
		)VALUES(
		<if test="level_code_ != null and level_code_ != ''">
	          #{level_code_, jdbcType=VARCHAR}, <!-- level_code_ -->
	    </if>
		<if test="name_ != null and name_ != ''">
	          #{name_, jdbcType=VARCHAR}, <!-- name_ -->
	    </if>
		<if test="parent_id_ != null">
	          #{parent_id_, jdbcType=INTEGER}, <!-- parent_id_ -->
	    </if>
		<if test="is_leaf_ != null">
	          #{is_leaf_, jdbcType=INTEGER}, <!-- is_leaf_ -->
	    </if>
		<if test="gather_purpose_ != null and gather_purpose_ != ''">
	          #{gather_purpose_, jdbcType=VARCHAR}, <!-- gather_purpose_ -->
	    </if>
		<if test="created_by_ != null and created_by_ != ''">
	          #{created_by_, jdbcType=VARCHAR}, <!-- created_by_ -->
	    </if>
		<if test="created_time_ != null and created_time_ != ''">
	          #{created_time_, jdbcType=VARCHAR}, <!-- created_time_ -->
	    </if>
	          null
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll" useGeneratedKeys="true" keyProperty="id_" parameterType="As_layer_gatherPO">
		INSERT INTO as_layer_gather (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=INTEGER},  <!-- id_ -->
		    #{level_code_, jdbcType=VARCHAR},  <!-- level_code_ -->
		    #{name_, jdbcType=VARCHAR},  <!-- name_ -->
		    #{parent_id_, jdbcType=INTEGER},  <!-- parent_id_ -->
		    #{is_leaf_, jdbcType=INTEGER},  <!-- is_leaf_ -->
		    #{gather_purpose_, jdbcType=VARCHAR},  <!-- gather_purpose_ -->
		    #{created_by_, jdbcType=VARCHAR},  <!-- created_by_ -->
		    #{created_time_, jdbcType=VARCHAR}  <!-- created_time_ -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="As_layer_gatherPO">
		UPDATE as_layer_gather
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=INTEGER},  <!-- id_ -->
			</if>
			<if test="level_code_ != null">
		          level_code_ = #{level_code_, jdbcType=VARCHAR},  <!-- level_code_ -->
			</if>
			<if test="name_ != null">
		          name_ = #{name_, jdbcType=VARCHAR},  <!-- name_ -->
			</if>
			<if test="parent_id_ != null">
		          parent_id_ = #{parent_id_, jdbcType=INTEGER},  <!-- parent_id_ -->
			</if>
			<if test="is_leaf_ != null">
		          is_leaf_ = #{is_leaf_, jdbcType=INTEGER},  <!-- is_leaf_ -->
			</if>
			<if test="gather_purpose_ != null">
		          gather_purpose_ = #{gather_purpose_, jdbcType=VARCHAR},  <!-- gather_purpose_ -->
			</if>
			<if test="created_by_ != null">
		          created_by_ = #{created_by_, jdbcType=VARCHAR},  <!-- created_by_ -->
			</if>
			<if test="created_time_ != null">
		          created_time_ = #{created_time_, jdbcType=VARCHAR},  <!-- created_time_ -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM as_layer_gather WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="As_layer_gatherPO">
		SELECT
		<include refid="column" />
		FROM as_layer_gather WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="As_layer_gatherPO">
		SELECT
		    <include refid="column" />
		FROM as_layer_gather
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="As_layer_gatherPO">
		SELECT
			<include refid="column" />	
		FROM as_layer_gather
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="As_layer_gatherPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM as_layer_gather
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="As_layer_gatherPO">
		SELECT
			<include refid="column" />	
		FROM as_layer_gather
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="As_layer_gatherPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM as_layer_gather
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM as_layer_gather
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM as_layer_gather
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- id_ -->
		  level_code_,  <!-- level_code_ -->
		  name_,  <!-- name_ -->
		  parent_id_,  <!-- parent_id_ -->
		  is_leaf_,  <!-- is_leaf_ -->
		  gather_purpose_,  <!-- gather_purpose_ -->
		  created_by_,  <!-- created_by_ -->
		  created_time_  <!-- created_time_ -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  as_layer_gather.id_,  <!-- id_ -->
		  as_layer_gather.level_code_,  <!-- level_code_ -->
		  as_layer_gather.name_,  <!-- name_ -->
		  as_layer_gather.parent_id_,  <!-- parent_id_ -->
		  as_layer_gather.is_leaf_,  <!-- is_leaf_ -->
		  as_layer_gather.gather_purpose_,  <!-- gather_purpose_ -->
		  as_layer_gather.created_by_,  <!-- created_by_ -->
		  as_layer_gather.created_time_  <!-- created_time_ -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	   <if test="id_ != null ">
		      AND id_ = #{id_}  <!-- id_ -->
		</if>
	    <if test="level_code_ != null and level_code_ != ''">
		      AND level_code_ = #{level_code_}  <!-- level_code_ -->
		</if>
	    <if test="name_ != null and name_ != ''">
		      AND name_ = #{name_}  <!-- name_ -->
		</if>
	   <if test="parent_id_ != null ">
		      AND parent_id_ = #{parent_id_}  <!-- parent_id_ -->
		</if>
	   <if test="is_leaf_ != null ">
		      AND is_leaf_ = #{is_leaf_}  <!-- is_leaf_ -->
		</if>
	    <if test="gather_purpose_ != null and gather_purpose_ != ''">
		      AND gather_purpose_ = #{gather_purpose_}  <!-- gather_purpose_ -->
		</if>
	    <if test="created_by_ != null and created_by_ != ''">
		      AND created_by_ = #{created_by_}  <!-- created_by_ -->
		</if>
	    <if test="created_time_ != null and created_time_ != ''">
		      AND created_time_ = #{created_time_}  <!-- created_time_ -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="level_code_ != null and level_code_ != ''">
		      AND level_code_ like '%${level_code_}%'  <!-- level_code_ -->
		</if>
	    <if test="name_ != null and name_ != ''">
		      AND name_ like '%${name_}%'  <!-- name_ -->
		</if>
	    <if test="gather_purpose_ != null and gather_purpose_ != ''">
		      AND gather_purpose_ like '%${gather_purpose_}%'  <!-- gather_purpose_ -->
		</if>
	    <if test="created_by_ != null and created_by_ != ''">
		      AND created_by_ like '%${created_by_}%'  <!-- created_by_ -->
		</if>
	    <if test="created_time_ != null and created_time_ != ''">
		      AND created_time_ like '%${created_time_}%'  <!-- created_time_ -->
		</if>
	</sql>
	
</mapper>