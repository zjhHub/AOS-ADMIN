<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- as_summary_account[as_summary_account]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2017-04-11 23:18:13 -->
<mapper namespace="com.chinazyjr.as.dao.As_summary_accountDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id_" parameterType="As_summary_accountPO">
		INSERT INTO as_summary_account (
		<if test="gather_id_ != null">
	         gather_id_, <!-- gather_id_ -->
		</if>
		<if test="account_id_ != null">
	         account_id_, <!-- account_id_ -->
		</if>
	          id_
		)VALUES(
		<if test="gather_id_ != null">
	          #{gather_id_, jdbcType=INTEGER}, <!-- gather_id_ -->
	    </if>
		<if test="account_id_ != null">
	          #{account_id_, jdbcType=INTEGER}, <!-- account_id_ -->
	    </if>
	          null
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll" useGeneratedKeys="true" keyProperty="id_" parameterType="As_summary_accountPO">
		INSERT INTO as_summary_account (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=INTEGER},  <!-- id_ -->
		    #{gather_id_, jdbcType=INTEGER},  <!-- gather_id_ -->
		    #{account_id_, jdbcType=INTEGER}  <!-- account_id_ -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="As_summary_accountPO">
		UPDATE as_summary_account
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=INTEGER},  <!-- id_ -->
			</if>
			<if test="gather_id_ != null">
		          gather_id_ = #{gather_id_, jdbcType=INTEGER},  <!-- gather_id_ -->
			</if>
			<if test="account_id_ != null">
		          account_id_ = #{account_id_, jdbcType=INTEGER},  <!-- account_id_ -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM as_summary_account WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="As_summary_accountPO">
		SELECT
		<include refid="column" />
		FROM as_summary_account WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="As_summary_accountPO">
		SELECT
		    <include refid="column" />
		FROM as_summary_account
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="As_summary_accountPO">
		SELECT
			<include refid="column" />	
		FROM as_summary_account
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="As_summary_accountPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM as_summary_account
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="As_summary_accountPO">
		SELECT
			<include refid="column" />	
		FROM as_summary_account
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="As_summary_accountPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM as_summary_account
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM as_summary_account
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM as_summary_account
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- id_ -->
		  gather_id_,  <!-- gather_id_ -->
		  account_id_  <!-- account_id_ -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  as_summary_account.id_,  <!-- id_ -->
		  as_summary_account.gather_id_,  <!-- gather_id_ -->
		  as_summary_account.account_id_  <!-- account_id_ -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	   <if test="id_ != null ">
		      AND id_ = #{id_}  <!-- id_ -->
		</if>
	   <if test="gather_id_ != null ">
		      AND gather_id_ = #{gather_id_}  <!-- gather_id_ -->
		</if>
	   <if test="account_id_ != null ">
		      AND account_id_ = #{account_id_}  <!-- account_id_ -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	</sql>
	
</mapper>