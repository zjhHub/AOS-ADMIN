<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- as_log_request[as_log_request]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2017-03-23 14:14:23 -->
<mapper namespace="com.chinazyjr.as.dao.As_log_requestDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="As_log_requestPO">
		INSERT INTO as_log_request (
		<if test="platform_id_ != null">
	         platform_id_, <!-- platform_id_ -->
		</if>
		<if test="content_ != null and content_ != ''">
	         content_, <!-- content_ -->
		</if>
		<if test="time_ != null and time_ != ''">
	         time_, <!-- time_ -->
		</if>
		<if test="service_code_ != null">
	         service_code_, <!-- service_code_ -->
		</if>
		<if test="ip_ != null">
	         ip_, <!-- ip_ -->
		</if>
		<if test="uuid_ != null and uuid_ != ''">
	          uuid_  <!-- uuid_ -->
	   </if>
		)VALUES(
		<if test="platform_id_ != null">
	          #{platform_id_, jdbcType=INTEGER}, <!-- platform_id_ -->
	    </if>
		<if test="content_ != null and content_ != ''">
	          #{content_, jdbcType=VARCHAR}, <!-- content_ -->
	    </if>
		<if test="time_ != null and time_ != ''">
	          #{time_, jdbcType=VARCHAR}, <!-- time_ -->
	    </if>
		<if test="service_code_ != null">
	          #{service_code_, jdbcType=INTEGER}, <!-- service_code_ -->
	    </if>
		<if test="ip_ != null">
	          #{ip_, jdbcType=INTEGER}, <!-- ip_ -->
	    </if>
		<if test="uuid_ != null and uuid_ != ''">
		     #{uuid_, jdbcType=VARCHAR}  <!-- uuid_ -->
	    </if>
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="As_log_requestPO">
		INSERT INTO as_log_request (
		    <include refid="column" />
		)
		VALUES (
		    #{uuid_, jdbcType=VARCHAR},  <!-- uuid_ -->
		    #{platform_id_, jdbcType=INTEGER},  <!-- platform_id_ -->
		    #{content_, jdbcType=VARCHAR},  <!-- content_ -->
		    #{time_, jdbcType=VARCHAR},  <!-- time_ -->
		    #{service_code_, jdbcType=INTEGER},  <!-- service_code_ -->
		    #{ip_, jdbcType=INTEGER}  <!-- ip_ -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="As_log_requestPO">
		UPDATE as_log_request
		<set>
			<if test="uuid_ != null">
		          uuid_ = #{uuid_, jdbcType=VARCHAR},  <!-- uuid_ -->
			</if>
			<if test="platform_id_ != null">
		          platform_id_ = #{platform_id_, jdbcType=INTEGER},  <!-- platform_id_ -->
			</if>
			<if test="content_ != null">
		          content_ = #{content_, jdbcType=VARCHAR},  <!-- content_ -->
			</if>
			<if test="time_ != null">
		          time_ = #{time_, jdbcType=VARCHAR},  <!-- time_ -->
			</if>
			<if test="service_code_ != null">
		          service_code_ = #{service_code_, jdbcType=INTEGER},  <!-- service_code_ -->
			</if>
			<if test="ip_ != null">
		          ip_ = #{ip_, jdbcType=INTEGER},  <!-- ip_ -->
			</if>
		</set>
		WHERE  uuid_ = #{uuid_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM as_log_request WHERE  uuid_ = #{uuid_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="As_log_requestPO">
		SELECT
		<include refid="column" />
		FROM as_log_request WHERE  uuid_ = #{uuid_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="As_log_requestPO">
		SELECT
		    <include refid="column" />
		FROM as_log_request
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="As_log_requestPO">
		SELECT
			<include refid="column" />	
		FROM as_log_request
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="As_log_requestPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM as_log_request
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="As_log_requestPO">
		SELECT
			<include refid="column" />	
		FROM as_log_request
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="As_log_requestPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM as_log_request
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM as_log_request
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM as_log_request
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  uuid_,  <!-- uuid_ -->
		  platform_id_,  <!-- platform_id_ -->
		  content_,  <!-- content_ -->
		  time_,  <!-- time_ -->
		  service_code_,  <!-- service_code_ -->
		  ip_  <!-- ip_ -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  as_log_request.uuid_,  <!-- uuid_ -->
		  as_log_request.platform_id_,  <!-- platform_id_ -->
		  as_log_request.content_,  <!-- content_ -->
		  as_log_request.time_,  <!-- time_ -->
		  as_log_request.service_code_,  <!-- service_code_ -->
		  as_log_request.ip_  <!-- ip_ -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	    <if test="uuid_ != null and uuid_ != ''">
		      AND uuid_ = #{uuid_}  <!-- uuid_ -->
		</if>
	   <if test="platform_id_ != null ">
		      AND platform_id_ = #{platform_id_}  <!-- platform_id_ -->
		</if>
	    <if test="content_ != null and content_ != ''">
		      AND content_ = #{content_}  <!-- content_ -->
		</if>
	    <if test="time_ != null and time_ != ''">
		      AND time_ = #{time_}  <!-- time_ -->
		</if>
	   <if test="service_code_ != null ">
		      AND service_code_ = #{service_code_}  <!-- service_code_ -->
		</if>
	   <if test="ip_ != null ">
		      AND ip_ = #{ip_}  <!-- ip_ -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="uuid_ != null and uuid_ != ''">
		      AND uuid_ like '%${uuid_}%'  <!-- uuid_ -->
		</if>
	    <if test="content_ != null and content_ != ''">
		      AND content_ like '%${content_}%'  <!-- content_ -->
		</if>
	    <if test="time_ != null and time_ != ''">
		      AND time_ like '%${time_}%'  <!-- time_ -->
		</if>
	</sql>
	
</mapper>