<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- as_msg_auth_code[as_msg_auth_code]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2017-03-29 10:16:05 -->
<mapper namespace="com.chinazyjr.as.dao.As_msg_auth_codeDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id_" parameterType="As_msg_auth_codePO">
		INSERT INTO as_msg_auth_code (
		<if test="msg_code_ != null and msg_code_ != ''">
	         msg_code_, <!-- msg_code_ -->
		</if>
		<if test="available_time_ != null and available_time_ != ''">
	         available_time_, <!-- available_time_ -->
		</if>
		<if test="sent_time_ != null and sent_time_ != ''">
	         sent_time_, <!-- sent_time_ -->
		</if>
		<if test="passed_ != null">
	         passed_, <!-- passed_ -->
		</if>
		<if test="passed_time_ != null and passed_time_ != ''">
	         passed_time_, <!-- passed_time_ -->
		</if>
		<if test="passed_by_ != null and passed_by_ != ''">
	         passed_by_, <!-- passed_by_ -->
		</if>
	          id_
		)VALUES(
		<if test="msg_code_ != null and msg_code_ != ''">
	          #{msg_code_, jdbcType=VARCHAR}, <!-- msg_code_ -->
	    </if>
		<if test="available_time_ != null and available_time_ != ''">
	          #{available_time_, jdbcType=VARCHAR}, <!-- available_time_ -->
	    </if>
		<if test="sent_time_ != null and sent_time_ != ''">
	          #{sent_time_, jdbcType=VARCHAR}, <!-- sent_time_ -->
	    </if>
		<if test="passed_ != null">
	          #{passed_, jdbcType=INTEGER}, <!-- passed_ -->
	    </if>
		<if test="passed_time_ != null and passed_time_ != ''">
	          #{passed_time_, jdbcType=VARCHAR}, <!-- passed_time_ -->
	    </if>
		<if test="passed_by_ != null and passed_by_ != ''">
	          #{passed_by_, jdbcType=VARCHAR}, <!-- passed_by_ -->
	    </if>
	          null
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll" useGeneratedKeys="true" keyProperty="id_" parameterType="As_msg_auth_codePO">
		INSERT INTO as_msg_auth_code (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=INTEGER},  <!-- id_ -->
		    #{msg_code_, jdbcType=VARCHAR},  <!-- msg_code_ -->
		    #{available_time_, jdbcType=VARCHAR},  <!-- available_time_ -->
		    #{sent_time_, jdbcType=VARCHAR},  <!-- sent_time_ -->
		    #{passed_, jdbcType=INTEGER},  <!-- passed_ -->
		    #{passed_time_, jdbcType=VARCHAR},  <!-- passed_time_ -->
		    #{passed_by_, jdbcType=VARCHAR}  <!-- passed_by_ -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="As_msg_auth_codePO">
		UPDATE as_msg_auth_code
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=INTEGER},  <!-- id_ -->
			</if>
			<if test="msg_code_ != null">
		          msg_code_ = #{msg_code_, jdbcType=VARCHAR},  <!-- msg_code_ -->
			</if>
			<if test="available_time_ != null">
		          available_time_ = #{available_time_, jdbcType=VARCHAR},  <!-- available_time_ -->
			</if>
			<if test="sent_time_ != null">
		          sent_time_ = #{sent_time_, jdbcType=VARCHAR},  <!-- sent_time_ -->
			</if>
			<if test="passed_ != null">
		          passed_ = #{passed_, jdbcType=INTEGER},  <!-- passed_ -->
			</if>
			<if test="passed_time_ != null">
		          passed_time_ = #{passed_time_, jdbcType=VARCHAR},  <!-- passed_time_ -->
			</if>
			<if test="passed_by_ != null">
		          passed_by_ = #{passed_by_, jdbcType=VARCHAR},  <!-- passed_by_ -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM as_msg_auth_code WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="As_msg_auth_codePO">
		SELECT
		<include refid="column" />
		FROM as_msg_auth_code WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="As_msg_auth_codePO">
		SELECT
		    <include refid="column" />
		FROM as_msg_auth_code
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="As_msg_auth_codePO">
		SELECT
			<include refid="column" />	
		FROM as_msg_auth_code
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="As_msg_auth_codePO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM as_msg_auth_code
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="As_msg_auth_codePO">
		SELECT
			<include refid="column" />	
		FROM as_msg_auth_code
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="As_msg_auth_codePO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM as_msg_auth_code
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM as_msg_auth_code
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM as_msg_auth_code
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- id_ -->
		  msg_code_,  <!-- msg_code_ -->
		  available_time_,  <!-- available_time_ -->
		  sent_time_,  <!-- sent_time_ -->
		  passed_,  <!-- passed_ -->
		  passed_time_,  <!-- passed_time_ -->
		  passed_by_  <!-- passed_by_ -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  as_msg_auth_code.id_,  <!-- id_ -->
		  as_msg_auth_code.msg_code_,  <!-- msg_code_ -->
		  as_msg_auth_code.available_time_,  <!-- available_time_ -->
		  as_msg_auth_code.sent_time_,  <!-- sent_time_ -->
		  as_msg_auth_code.passed_,  <!-- passed_ -->
		  as_msg_auth_code.passed_time_,  <!-- passed_time_ -->
		  as_msg_auth_code.passed_by_  <!-- passed_by_ -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	   <if test="id_ != null ">
		      AND id_ = #{id_}  <!-- id_ -->
		</if>
	    <if test="msg_code_ != null and msg_code_ != ''">
		      AND msg_code_ = #{msg_code_}  <!-- msg_code_ -->
		</if>
	    <if test="available_time_ != null and available_time_ != ''">
		      AND available_time_ = #{available_time_}  <!-- available_time_ -->
		</if>
	    <if test="sent_time_ != null and sent_time_ != ''">
		      AND sent_time_ = #{sent_time_}  <!-- sent_time_ -->
		</if>
	   <if test="passed_ != null ">
		      AND passed_ = #{passed_}  <!-- passed_ -->
		</if>
	    <if test="passed_time_ != null and passed_time_ != ''">
		      AND passed_time_ = #{passed_time_}  <!-- passed_time_ -->
		</if>
	    <if test="passed_by_ != null and passed_by_ != ''">
		      AND passed_by_ = #{passed_by_}  <!-- passed_by_ -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="msg_code_ != null and msg_code_ != ''">
		      AND msg_code_ like '%${msg_code_}%'  <!-- msg_code_ -->
		</if>
	    <if test="available_time_ != null and available_time_ != ''">
		      AND available_time_ like '%${available_time_}%'  <!-- available_time_ -->
		</if>
	    <if test="sent_time_ != null and sent_time_ != ''">
		      AND sent_time_ like '%${sent_time_}%'  <!-- sent_time_ -->
		</if>
	    <if test="passed_time_ != null and passed_time_ != ''">
		      AND passed_time_ like '%${passed_time_}%'  <!-- passed_time_ -->
		</if>
	    <if test="passed_by_ != null and passed_by_ != ''">
		      AND passed_by_ like '%${passed_by_}%'  <!-- passed_by_ -->
		</if>
	</sql>
	
</mapper>