<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- fc_customer_change_log[fc_customer_change_log]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2017-04-15 14:38:29 -->
<mapper namespace="aos.fc.dao.Fc_customer_change_logDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id_" parameterType="Fc_customer_change_logPO">
		INSERT INTO fc_customer_change_log (
		<if test="change_name_ != null">
	         change_name_, <!-- change_name_ -->
		</if>
		<if test="change_before_ != null and change_before_ != ''">
	         change_before_, <!-- change_before_ -->
		</if>
		<if test="change_after_ != null and change_after_ != ''">
	         change_after_, <!-- change_after_ -->
		</if>
		<if test="change_time_ != null and change_time_ != ''">
	         change_time_, <!-- change_time_ -->
		</if>
		<if test="change_by_ != null and change_by_ != ''">
	         change_by_, <!-- change_by_ -->
		</if>
		<if test="customer_id_ != null">
	         customer_id_, <!-- customer_id_ -->
		</if>
	          id_
		)VALUES(
		<if test="change_name_ != null">
	          #{change_name_, jdbcType=INTEGER}, <!-- change_name_ -->
	    </if>
		<if test="change_before_ != null and change_before_ != ''">
	          #{change_before_, jdbcType=VARCHAR}, <!-- change_before_ -->
	    </if>
		<if test="change_after_ != null and change_after_ != ''">
	          #{change_after_, jdbcType=VARCHAR}, <!-- change_after_ -->
	    </if>
		<if test="change_time_ != null and change_time_ != ''">
	          #{change_time_, jdbcType=VARCHAR}, <!-- change_time_ -->
	    </if>
		<if test="change_by_ != null and change_by_ != ''">
	          #{change_by_, jdbcType=VARCHAR}, <!-- change_by_ -->
	    </if>
		<if test="customer_id_ != null">
	          #{customer_id_, jdbcType=INTEGER}, <!-- customer_id_ -->
	    </if>
	          null
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll" useGeneratedKeys="true" keyProperty="id_" parameterType="Fc_customer_change_logPO">
		INSERT INTO fc_customer_change_log (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=INTEGER},  <!-- id_ -->
		    #{change_name_, jdbcType=INTEGER},  <!-- change_name_ -->
		    #{change_before_, jdbcType=VARCHAR},  <!-- change_before_ -->
		    #{change_after_, jdbcType=VARCHAR},  <!-- change_after_ -->
		    #{change_time_, jdbcType=VARCHAR},  <!-- change_time_ -->
		    #{change_by_, jdbcType=VARCHAR},  <!-- change_by_ -->
		    #{customer_id_, jdbcType=INTEGER}  <!-- customer_id_ -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Fc_customer_change_logPO">
		UPDATE fc_customer_change_log
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=INTEGER},  <!-- id_ -->
			</if>
			<if test="change_name_ != null">
		          change_name_ = #{change_name_, jdbcType=INTEGER},  <!-- change_name_ -->
			</if>
			<if test="change_before_ != null">
		          change_before_ = #{change_before_, jdbcType=VARCHAR},  <!-- change_before_ -->
			</if>
			<if test="change_after_ != null">
		          change_after_ = #{change_after_, jdbcType=VARCHAR},  <!-- change_after_ -->
			</if>
			<if test="change_time_ != null">
		          change_time_ = #{change_time_, jdbcType=VARCHAR},  <!-- change_time_ -->
			</if>
			<if test="change_by_ != null">
		          change_by_ = #{change_by_, jdbcType=VARCHAR},  <!-- change_by_ -->
			</if>
			<if test="customer_id_ != null">
		          customer_id_ = #{customer_id_, jdbcType=INTEGER},  <!-- customer_id_ -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM fc_customer_change_log WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Fc_customer_change_logPO">
		SELECT
		<include refid="column" />
		FROM fc_customer_change_log WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Fc_customer_change_logPO">
		SELECT
		    <include refid="column" />
		FROM fc_customer_change_log
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Fc_customer_change_logPO">
		SELECT
			<include refid="column" />	
		FROM fc_customer_change_log
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Fc_customer_change_logPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM fc_customer_change_log
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Fc_customer_change_logPO">
		SELECT
			<include refid="column" />	
		FROM fc_customer_change_log
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Fc_customer_change_logPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM fc_customer_change_log
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM fc_customer_change_log
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM fc_customer_change_log
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- id_ -->
		  change_name_,  <!-- change_name_ -->
		  change_before_,  <!-- change_before_ -->
		  change_after_,  <!-- change_after_ -->
		  change_time_,  <!-- change_time_ -->
		  change_by_,  <!-- change_by_ -->
		  customer_id_  <!-- customer_id_ -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  fc_customer_change_log.id_,  <!-- id_ -->
		  fc_customer_change_log.change_name_,  <!-- change_name_ -->
		  fc_customer_change_log.change_before_,  <!-- change_before_ -->
		  fc_customer_change_log.change_after_,  <!-- change_after_ -->
		  fc_customer_change_log.change_time_,  <!-- change_time_ -->
		  fc_customer_change_log.change_by_,  <!-- change_by_ -->
		  fc_customer_change_log.customer_id_  <!-- customer_id_ -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	   <if test="id_ != null ">
		      AND id_ = #{id_}  <!-- id_ -->
		</if>
	   <if test="change_name_ != null ">
		      AND change_name_ = #{change_name_}  <!-- change_name_ -->
		</if>
	    <if test="change_before_ != null and change_before_ != ''">
		      AND change_before_ = #{change_before_}  <!-- change_before_ -->
		</if>
	    <if test="change_after_ != null and change_after_ != ''">
		      AND change_after_ = #{change_after_}  <!-- change_after_ -->
		</if>
	    <if test="change_time_ != null and change_time_ != ''">
		      AND change_time_ = #{change_time_}  <!-- change_time_ -->
		</if>
	    <if test="change_by_ != null and change_by_ != ''">
		      AND change_by_ = #{change_by_}  <!-- change_by_ -->
		</if>
	   <if test="customer_id_ != null ">
		      AND customer_id_ = #{customer_id_}  <!-- customer_id_ -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="change_before_ != null and change_before_ != ''">
		      AND change_before_ like '%${change_before_}%'  <!-- change_before_ -->
		</if>
	    <if test="change_after_ != null and change_after_ != ''">
		      AND change_after_ like '%${change_after_}%'  <!-- change_after_ -->
		</if>
	    <if test="change_time_ != null and change_time_ != ''">
		      AND change_time_ like '%${change_time_}%'  <!-- change_time_ -->
		</if>
	    <if test="change_by_ != null and change_by_ != ''">
		      AND change_by_ like '%${change_by_}%'  <!-- change_by_ -->
		</if>
	</sql>
	
</mapper>