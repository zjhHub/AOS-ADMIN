<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- fc_financial_category[fc_financial_category]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2017-02-07 10:53:00 -->
<mapper namespace="aos.fc.dao.Fc_financial_categoryDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id_" parameterType="Fc_financial_categoryPO">
		INSERT INTO fc_financial_category (
		<if test="name_ != null and name_ != ''">
	         name_, <!-- name_ -->
		</if>
		<if test="type_ != null">
	         type_, <!-- 科目类别，有两类：
            1、冲消科目
            2、截留科目 -->
		</if>
		<if test="enabled_ != null">
	         enabled_, <!-- enabled_ -->
		</if>
		<if test="remark_ != null and remark_ != ''">
	         remark_, <!-- remark_ -->
		</if>
	          id_
		)VALUES(
		<if test="name_ != null and name_ != ''">
	          #{name_, jdbcType=VARCHAR}, <!-- name_ -->
	    </if>
		<if test="type_ != null">
	          #{type_, jdbcType=INTEGER}, <!-- 科目类别，有两类：
            1、冲消科目
            2、截留科目 -->
	    </if>
		<if test="enabled_ != null">
	          #{enabled_, jdbcType=INTEGER}, <!-- enabled_ -->
	    </if>
		<if test="remark_ != null and remark_ != ''">
	          #{remark_, jdbcType=VARCHAR}, <!-- remark_ -->
	    </if>
	          null
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll" useGeneratedKeys="true" keyProperty="id_" parameterType="Fc_financial_categoryPO">
		INSERT INTO fc_financial_category (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=INTEGER},  <!-- id_ -->
		    #{name_, jdbcType=VARCHAR},  <!-- name_ -->
		    #{type_, jdbcType=INTEGER},  <!-- 科目类别，有两类：
            1、冲消科目
            2、截留科目 -->
		    #{enabled_, jdbcType=INTEGER},  <!-- enabled_ -->
		    #{remark_, jdbcType=VARCHAR}  <!-- remark_ -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Fc_financial_categoryPO">
		UPDATE fc_financial_category
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=INTEGER},  <!-- id_ -->
			</if>
			<if test="name_ != null">
		          name_ = #{name_, jdbcType=VARCHAR},  <!-- name_ -->
			</if>
			<if test="type_ != null">
		          type_ = #{type_, jdbcType=INTEGER},  <!-- 科目类别，有两类：
            1、冲消科目
            2、截留科目 -->
			</if>
			<if test="enabled_ != null">
		          enabled_ = #{enabled_, jdbcType=INTEGER},  <!-- enabled_ -->
			</if>
			<if test="remark_ != null">
		          remark_ = #{remark_, jdbcType=VARCHAR},  <!-- remark_ -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM fc_financial_category WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Fc_financial_categoryPO">
		SELECT
		<include refid="column" />
		FROM fc_financial_category WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Fc_financial_categoryPO">
		SELECT
		    <include refid="column" />
		FROM fc_financial_category
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Fc_financial_categoryPO">
		SELECT
			<include refid="column" />	
		FROM fc_financial_category
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Fc_financial_categoryPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM fc_financial_category
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Fc_financial_categoryPO">
		SELECT
			<include refid="column" />	
		FROM fc_financial_category
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Fc_financial_categoryPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM fc_financial_category
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM fc_financial_category
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM fc_financial_category
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- id_ -->
		  name_,  <!-- name_ -->
		  type_,  <!-- 科目类别，有两类：
            1、冲消科目
            2、截留科目 -->
		  enabled_,  <!-- enabled_ -->
		  remark_  <!-- remark_ -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  fc_financial_category.id_,  <!-- id_ -->
		  fc_financial_category.name_,  <!-- name_ -->
		  fc_financial_category.type_,  <!-- 科目类别，有两类：
            1、冲消科目
            2、截留科目 -->
		  fc_financial_category.enabled_,  <!-- enabled_ -->
		  fc_financial_category.remark_  <!-- remark_ -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	   <if test="id_ != null ">
		      AND id_ = #{id_}  <!-- id_ -->
		</if>
	    <if test="name_ != null and name_ != ''">
		      AND name_ = #{name_}  <!-- name_ -->
		</if>
	   <if test="type_ != null ">
		      AND type_ = #{type_}  <!-- 科目类别，有两类：
            1、冲消科目
            2、截留科目 -->
		</if>
	   <if test="enabled_ != null ">
		      AND enabled_ = #{enabled_}  <!-- enabled_ -->
		</if>
	    <if test="remark_ != null and remark_ != ''">
		      AND remark_ = #{remark_}  <!-- remark_ -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="name_ != null and name_ != ''">
		      AND name_ like '%${name_}%'  <!-- name_ -->
		</if>
	    <if test="remark_ != null and remark_ != ''">
		      AND remark_ like '%${remark_}%'  <!-- remark_ -->
		</if>
	</sql>
	
</mapper>