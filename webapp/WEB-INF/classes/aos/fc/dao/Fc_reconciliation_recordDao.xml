<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- fc_reconciliation_record[fc_reconciliation_record]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2017-02-17 10:39:12 -->
<mapper namespace="aos.fc.dao.Fc_reconciliation_recordDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id_" parameterType="Fc_reconciliation_recordPO">
		INSERT INTO fc_reconciliation_record (
		<if test="third_channel_id_ != null">
	         third_channel_id_, <!-- third_channel_id_ -->
		</if>
		<if test="type_ != null">
	         type_, <!-- type_ -->
		</if>
		<if test="reconciliation_date_ != null">
	         reconciliation_date_, <!-- reconciliation_date_ -->
		</if>
		<if test="request_message_ != null and request_message_ != ''">
	         request_message_, <!-- request_message_ -->
		</if>
		<if test="handle_result_ != null">
	         handle_result_, <!-- handle_result_ -->
		</if>
		<if test="file_path_ != null and file_path_ != ''">
	         file_path_, <!-- file_path_ -->
		</if>
		<if test="created_time_ != null and created_time_ != ''">
	         created_time_, <!-- created_time_ -->
		</if>
		<if test="updated_time_ != null and updated_time_ != ''">
	         updated_time_, <!-- updated_time_ -->
		</if>
	          id_
		)VALUES(
		<if test="third_channel_id_ != null">
	          #{third_channel_id_, jdbcType=INTEGER}, <!-- third_channel_id_ -->
	    </if>
		<if test="type_ != null">
	          #{type_, jdbcType=INTEGER}, <!-- type_ -->
	    </if>
		<if test="reconciliation_date_ != null">
	          #{reconciliation_date_, jdbcType=DATE}, <!-- reconciliation_date_ -->
	    </if>
		<if test="request_message_ != null and request_message_ != ''">
	          #{request_message_, jdbcType=VARCHAR}, <!-- request_message_ -->
	    </if>
		<if test="handle_result_ != null">
	          #{handle_result_, jdbcType=INTEGER}, <!-- handle_result_ -->
	    </if>
		<if test="file_path_ != null and file_path_ != ''">
	          #{file_path_, jdbcType=VARCHAR}, <!-- file_path_ -->
	    </if>
		<if test="created_time_ != null and created_time_ != ''">
	          #{created_time_, jdbcType=VARCHAR}, <!-- created_time_ -->
	    </if>
		<if test="updated_time_ != null and updated_time_ != ''">
	          #{updated_time_, jdbcType=VARCHAR}, <!-- updated_time_ -->
	    </if>
	          null
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll" useGeneratedKeys="true" keyProperty="id_" parameterType="Fc_reconciliation_recordPO">
		INSERT INTO fc_reconciliation_record (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=INTEGER},  <!-- id_ -->
		    #{third_channel_id_, jdbcType=INTEGER},  <!-- third_channel_id_ -->
		    #{type_, jdbcType=INTEGER},  <!-- type_ -->
		    #{reconciliation_date_, jdbcType=DATE},  <!-- reconciliation_date_ -->
		    #{request_message_, jdbcType=VARCHAR},  <!-- request_message_ -->
		    #{handle_result_, jdbcType=INTEGER},  <!-- handle_result_ -->
		    #{file_path_, jdbcType=VARCHAR},  <!-- file_path_ -->
		    #{created_time_, jdbcType=VARCHAR},  <!-- created_time_ -->
		    #{updated_time_, jdbcType=VARCHAR}  <!-- updated_time_ -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Fc_reconciliation_recordPO">
		UPDATE fc_reconciliation_record
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=INTEGER},  <!-- id_ -->
			</if>
			<if test="third_channel_id_ != null">
		          third_channel_id_ = #{third_channel_id_, jdbcType=INTEGER},  <!-- third_channel_id_ -->
			</if>
			<if test="type_ != null">
		          type_ = #{type_, jdbcType=INTEGER},  <!-- type_ -->
			</if>
			<if test="reconciliation_date_ != null">
		          reconciliation_date_ = #{reconciliation_date_, jdbcType=DATE},  <!-- reconciliation_date_ -->
			</if>
			<if test="request_message_ != null">
		          request_message_ = #{request_message_, jdbcType=VARCHAR},  <!-- request_message_ -->
			</if>
			<if test="handle_result_ != null">
		          handle_result_ = #{handle_result_, jdbcType=INTEGER},  <!-- handle_result_ -->
			</if>
			<if test="file_path_ != null">
		          file_path_ = #{file_path_, jdbcType=VARCHAR},  <!-- file_path_ -->
			</if>
			<if test="created_time_ != null">
		          created_time_ = #{created_time_, jdbcType=VARCHAR},  <!-- created_time_ -->
			</if>
			<if test="updated_time_ != null">
		          updated_time_ = #{updated_time_, jdbcType=VARCHAR},  <!-- updated_time_ -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM fc_reconciliation_record WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Fc_reconciliation_recordPO">
		SELECT
		<include refid="column" />
		FROM fc_reconciliation_record WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Fc_reconciliation_recordPO">
		SELECT
		    <include refid="column" />
		FROM fc_reconciliation_record
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Fc_reconciliation_recordPO">
		SELECT
			<include refid="column" />	
		FROM fc_reconciliation_record
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Fc_reconciliation_recordPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM fc_reconciliation_record
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Fc_reconciliation_recordPO">
		SELECT
			<include refid="column" />	
		FROM fc_reconciliation_record
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Fc_reconciliation_recordPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM fc_reconciliation_record
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM fc_reconciliation_record
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM fc_reconciliation_record
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- id_ -->
		  third_channel_id_,  <!-- third_channel_id_ -->
		  type_,  <!-- type_ -->
		  reconciliation_date_,  <!-- reconciliation_date_ -->
		  request_message_,  <!-- request_message_ -->
		  handle_result_,  <!-- handle_result_ -->
		  file_path_,  <!-- file_path_ -->
		  created_time_,  <!-- created_time_ -->
		  updated_time_  <!-- updated_time_ -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  fc_reconciliation_record.id_,  <!-- id_ -->
		  fc_reconciliation_record.third_channel_id_,  <!-- third_channel_id_ -->
		  fc_reconciliation_record.type_,  <!-- type_ -->
		  fc_reconciliation_record.reconciliation_date_,  <!-- reconciliation_date_ -->
		  fc_reconciliation_record.request_message_,  <!-- request_message_ -->
		  fc_reconciliation_record.handle_result_,  <!-- handle_result_ -->
		  fc_reconciliation_record.file_path_,  <!-- file_path_ -->
		  fc_reconciliation_record.created_time_,  <!-- created_time_ -->
		  fc_reconciliation_record.updated_time_  <!-- updated_time_ -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	   <if test="id_ != null ">
		      AND id_ = #{id_}  <!-- id_ -->
		</if>
	   <if test="third_channel_id_ != null ">
		      AND third_channel_id_ = #{third_channel_id_}  <!-- third_channel_id_ -->
		</if>
	   <if test="type_ != null ">
		      AND type_ = #{type_}  <!-- type_ -->
		</if>
	   <if test="reconciliation_date_ != null ">
		      AND reconciliation_date_ = #{reconciliation_date_}  <!-- reconciliation_date_ -->
		</if>
	    <if test="request_message_ != null and request_message_ != ''">
		      AND request_message_ = #{request_message_}  <!-- request_message_ -->
		</if>
	   <if test="handle_result_ != null ">
		      AND handle_result_ = #{handle_result_}  <!-- handle_result_ -->
		</if>
	    <if test="file_path_ != null and file_path_ != ''">
		      AND file_path_ = #{file_path_}  <!-- file_path_ -->
		</if>
	    <if test="created_time_ != null and created_time_ != ''">
		      AND created_time_ = #{created_time_}  <!-- created_time_ -->
		</if>
	    <if test="updated_time_ != null and updated_time_ != ''">
		      AND updated_time_ = #{updated_time_}  <!-- updated_time_ -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="request_message_ != null and request_message_ != ''">
		      AND request_message_ like '%${request_message_}%'  <!-- request_message_ -->
		</if>
	    <if test="file_path_ != null and file_path_ != ''">
		      AND file_path_ like '%${file_path_}%'  <!-- file_path_ -->
		</if>
	    <if test="created_time_ != null and created_time_ != ''">
		      AND created_time_ like '%${created_time_}%'  <!-- created_time_ -->
		</if>
	    <if test="updated_time_ != null and updated_time_ != ''">
		      AND updated_time_ like '%${updated_time_}%'  <!-- updated_time_ -->
		</if>
	</sql>
	
</mapper>