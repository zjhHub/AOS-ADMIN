<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- fc_chargeback_order_exception[fc_chargeback_order_exception]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2017-02-07 10:52:59 -->
<mapper namespace="aos.fc.dao.Fc_chargeback_order_exceptionDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert"  parameterType="Fc_chargeback_order_exceptionPO">
		INSERT INTO fc_chargeback_order_exception (
		<if test="response_code_ != null and response_code_ != ''">
	         response_code_, <!-- response_code_ -->
		</if>
		<if test="response_summary_ != null and response_summary_ != ''">
	         response_summary_, <!-- response_summary_ -->
		</if>
		<if test="response_msg_templet_ != null and response_msg_templet_ != ''">
	         response_msg_templet_, <!-- response_msg_templet_ -->
		</if>
		<if test="exception_time_ != null and exception_time_ != ''">
	         exception_time_, <!-- exception_time_ -->
		</if>
		<if test="order_id_ != null">
	          order_id_  <!-- order_id_ -->
	   </if>
		)VALUES(
		<if test="response_code_ != null and response_code_ != ''">
	          #{response_code_, jdbcType=VARCHAR}, <!-- response_code_ -->
	    </if>
		<if test="response_summary_ != null and response_summary_ != ''">
	          #{response_summary_, jdbcType=VARCHAR}, <!-- response_summary_ -->
	    </if>
		<if test="response_msg_templet_ != null and response_msg_templet_ != ''">
	          #{response_msg_templet_, jdbcType=VARCHAR}, <!-- response_msg_templet_ -->
	    </if>
		<if test="exception_time_ != null and exception_time_ != ''">
	          #{exception_time_, jdbcType=VARCHAR}, <!-- exception_time_ -->
	    </if>
		<if test="order_id_ != null">
		     #{order_id_, jdbcType=INTEGER}  <!-- order_id_ -->
	    </if>
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll"  parameterType="Fc_chargeback_order_exceptionPO">
		INSERT INTO fc_chargeback_order_exception (
		    <include refid="column" />
		)
		VALUES (
		    #{order_id_, jdbcType=INTEGER},  <!-- order_id_ -->
		    #{response_code_, jdbcType=VARCHAR},  <!-- response_code_ -->
		    #{response_summary_, jdbcType=VARCHAR},  <!-- response_summary_ -->
		    #{response_msg_templet_, jdbcType=VARCHAR},  <!-- response_msg_templet_ -->
		    #{exception_time_, jdbcType=VARCHAR}  <!-- exception_time_ -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Fc_chargeback_order_exceptionPO">
		UPDATE fc_chargeback_order_exception
		<set>
			<if test="order_id_ != null">
		          order_id_ = #{order_id_, jdbcType=INTEGER},  <!-- order_id_ -->
			</if>
			<if test="response_code_ != null">
		          response_code_ = #{response_code_, jdbcType=VARCHAR},  <!-- response_code_ -->
			</if>
			<if test="response_summary_ != null">
		          response_summary_ = #{response_summary_, jdbcType=VARCHAR},  <!-- response_summary_ -->
			</if>
			<if test="response_msg_templet_ != null">
		          response_msg_templet_ = #{response_msg_templet_, jdbcType=VARCHAR},  <!-- response_msg_templet_ -->
			</if>
			<if test="exception_time_ != null">
		          exception_time_ = #{exception_time_, jdbcType=VARCHAR},  <!-- exception_time_ -->
			</if>
		</set>
		WHERE  order_id_ = #{order_id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM fc_chargeback_order_exception WHERE  order_id_ = #{order_id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Fc_chargeback_order_exceptionPO">
		SELECT
		<include refid="column" />
		FROM fc_chargeback_order_exception WHERE  order_id_ = #{order_id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Fc_chargeback_order_exceptionPO">
		SELECT
		    <include refid="column" />
		FROM fc_chargeback_order_exception
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Fc_chargeback_order_exceptionPO">
		SELECT
			<include refid="column" />	
		FROM fc_chargeback_order_exception
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Fc_chargeback_order_exceptionPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM fc_chargeback_order_exception
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Fc_chargeback_order_exceptionPO">
		SELECT
			<include refid="column" />	
		FROM fc_chargeback_order_exception
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Fc_chargeback_order_exceptionPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM fc_chargeback_order_exception
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM fc_chargeback_order_exception
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM fc_chargeback_order_exception
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  order_id_,  <!-- order_id_ -->
		  response_code_,  <!-- response_code_ -->
		  response_summary_,  <!-- response_summary_ -->
		  response_msg_templet_,  <!-- response_msg_templet_ -->
		  exception_time_  <!-- exception_time_ -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  fc_chargeback_order_exception.order_id_,  <!-- order_id_ -->
		  fc_chargeback_order_exception.response_code_,  <!-- response_code_ -->
		  fc_chargeback_order_exception.response_summary_,  <!-- response_summary_ -->
		  fc_chargeback_order_exception.response_msg_templet_,  <!-- response_msg_templet_ -->
		  fc_chargeback_order_exception.exception_time_  <!-- exception_time_ -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	   <if test="order_id_ != null ">
		      AND order_id_ = #{order_id_}  <!-- order_id_ -->
		</if>
	    <if test="response_code_ != null and response_code_ != ''">
		      AND response_code_ = #{response_code_}  <!-- response_code_ -->
		</if>
	    <if test="response_summary_ != null and response_summary_ != ''">
		      AND response_summary_ = #{response_summary_}  <!-- response_summary_ -->
		</if>
	    <if test="response_msg_templet_ != null and response_msg_templet_ != ''">
		      AND response_msg_templet_ = #{response_msg_templet_}  <!-- response_msg_templet_ -->
		</if>
	    <if test="exception_time_ != null and exception_time_ != ''">
		      AND exception_time_ = #{exception_time_}  <!-- exception_time_ -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="response_code_ != null and response_code_ != ''">
		      AND response_code_ like '%${response_code_}%'  <!-- response_code_ -->
		</if>
	    <if test="response_summary_ != null and response_summary_ != ''">
		      AND response_summary_ like '%${response_summary_}%'  <!-- response_summary_ -->
		</if>
	    <if test="response_msg_templet_ != null and response_msg_templet_ != ''">
		      AND response_msg_templet_ like '%${response_msg_templet_}%'  <!-- response_msg_templet_ -->
		</if>
	    <if test="exception_time_ != null and exception_time_ != ''">
		      AND exception_time_ like '%${exception_time_}%'  <!-- exception_time_ -->
		</if>
	</sql>
	
</mapper>