<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- fc_reconciliation[fc_reconciliation]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2017-02-17 10:39:11 -->
<mapper namespace="aos.fc.dao.Fc_reconciliationDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id_" parameterType="Fc_reconciliationPO">
		INSERT INTO fc_reconciliation (
		<if test="third_channel_id_ != null">
	         third_channel_id_, <!-- third_channel_id_ -->
		</if>
		<if test="record_id_ != null">
	         record_id_, <!-- record_id_ -->
		</if>
		<if test="type_ != null">
	         type_, <!-- type_ -->
		</if>
		<if test="reconciliation_date_ != null">
	         reconciliation_date_, <!-- reconciliation_date_ -->
		</if>
		<if test="status_ != null">
	         status_, <!-- status_ -->
		</if>
		<if test="today_order_counts_ != null">
	         today_order_counts_, <!-- today_order_counts_ -->
		</if>
		<if test="succeed_counts_ != null">
	         succeed_counts_, <!-- succeed_counts_ -->
		</if>
		<if test="unbalance_counts_ != null">
	         unbalance_counts_, <!-- unbalance_counts_ -->
		</if>
		<if test="only_our_side_counts_ != null">
	         only_our_side_counts_, <!-- only_our_side_counts_ -->
		</if>
		<if test="only_third_side_counts_ != null">
	         only_third_side_counts_, <!-- only_third_side_counts_ -->
		</if>
		<if test="patch_before_counts_ != null">
	         patch_before_counts_, <!-- patch_before_counts_ -->
		</if>
		<if test="file_path_ != null and file_path_ != ''">
	         file_path_, <!-- file_path_ -->
		</if>
		<if test="created_time_ != null and created_time_ != ''">
	         created_time_, <!-- created_time_ -->
		</if>
		<if test="updated_time_ != null and updated_time_ != ''">
	         updated_time_, <!-- updated_time_ -->
		</if>
	          id_
		)VALUES(
		<if test="third_channel_id_ != null">
	          #{third_channel_id_, jdbcType=INTEGER}, <!-- third_channel_id_ -->
	    </if>
		<if test="record_id_ != null">
	          #{record_id_, jdbcType=INTEGER}, <!-- record_id_ -->
	    </if>
		<if test="type_ != null">
	          #{type_, jdbcType=INTEGER}, <!-- type_ -->
	    </if>
		<if test="reconciliation_date_ != null">
	          #{reconciliation_date_, jdbcType=DATE}, <!-- reconciliation_date_ -->
	    </if>
		<if test="status_ != null">
	          #{status_, jdbcType=INTEGER}, <!-- status_ -->
	    </if>
		<if test="today_order_counts_ != null">
	          #{today_order_counts_, jdbcType=INTEGER}, <!-- today_order_counts_ -->
	    </if>
		<if test="succeed_counts_ != null">
	          #{succeed_counts_, jdbcType=INTEGER}, <!-- succeed_counts_ -->
	    </if>
		<if test="unbalance_counts_ != null">
	          #{unbalance_counts_, jdbcType=INTEGER}, <!-- unbalance_counts_ -->
	    </if>
		<if test="only_our_side_counts_ != null">
	          #{only_our_side_counts_, jdbcType=INTEGER}, <!-- only_our_side_counts_ -->
	    </if>
		<if test="only_third_side_counts_ != null">
	          #{only_third_side_counts_, jdbcType=INTEGER}, <!-- only_third_side_counts_ -->
	    </if>
		<if test="patch_before_counts_ != null">
	          #{patch_before_counts_, jdbcType=INTEGER}, <!-- patch_before_counts_ -->
	    </if>
		<if test="file_path_ != null and file_path_ != ''">
	          #{file_path_, jdbcType=VARCHAR}, <!-- file_path_ -->
	    </if>
		<if test="created_time_ != null and created_time_ != ''">
	          #{created_time_, jdbcType=VARCHAR}, <!-- created_time_ -->
	    </if>
		<if test="updated_time_ != null and updated_time_ != ''">
	          #{updated_time_, jdbcType=VARCHAR}, <!-- updated_time_ -->
	    </if>
	          null
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll" useGeneratedKeys="true" keyProperty="id_" parameterType="Fc_reconciliationPO">
		INSERT INTO fc_reconciliation (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=INTEGER},  <!-- id_ -->
		    #{third_channel_id_, jdbcType=INTEGER},  <!-- third_channel_id_ -->
		    #{record_id_, jdbcType=INTEGER},  <!-- record_id_ -->
		    #{type_, jdbcType=INTEGER},  <!-- type_ -->
		    #{reconciliation_date_, jdbcType=DATE},  <!-- reconciliation_date_ -->
		    #{status_, jdbcType=INTEGER},  <!-- status_ -->
		    #{today_order_counts_, jdbcType=INTEGER},  <!-- today_order_counts_ -->
		    #{succeed_counts_, jdbcType=INTEGER},  <!-- succeed_counts_ -->
		    #{unbalance_counts_, jdbcType=INTEGER},  <!-- unbalance_counts_ -->
		    #{only_our_side_counts_, jdbcType=INTEGER},  <!-- only_our_side_counts_ -->
		    #{only_third_side_counts_, jdbcType=INTEGER},  <!-- only_third_side_counts_ -->
		    #{patch_before_counts_, jdbcType=INTEGER},  <!-- patch_before_counts_ -->
		    #{file_path_, jdbcType=VARCHAR},  <!-- file_path_ -->
		    #{created_time_, jdbcType=VARCHAR},  <!-- created_time_ -->
		    #{updated_time_, jdbcType=VARCHAR}  <!-- updated_time_ -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Fc_reconciliationPO">
		UPDATE fc_reconciliation
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=INTEGER},  <!-- id_ -->
			</if>
			<if test="third_channel_id_ != null">
		          third_channel_id_ = #{third_channel_id_, jdbcType=INTEGER},  <!-- third_channel_id_ -->
			</if>
			<if test="record_id_ != null">
		          record_id_ = #{record_id_, jdbcType=INTEGER},  <!-- record_id_ -->
			</if>
			<if test="type_ != null">
		          type_ = #{type_, jdbcType=INTEGER},  <!-- type_ -->
			</if>
			<if test="reconciliation_date_ != null">
		          reconciliation_date_ = #{reconciliation_date_, jdbcType=DATE},  <!-- reconciliation_date_ -->
			</if>
			<if test="status_ != null">
		          status_ = #{status_, jdbcType=INTEGER},  <!-- status_ -->
			</if>
			<if test="today_order_counts_ != null">
		          today_order_counts_ = #{today_order_counts_, jdbcType=INTEGER},  <!-- today_order_counts_ -->
			</if>
			<if test="succeed_counts_ != null">
		          succeed_counts_ = #{succeed_counts_, jdbcType=INTEGER},  <!-- succeed_counts_ -->
			</if>
			<if test="unbalance_counts_ != null">
		          unbalance_counts_ = #{unbalance_counts_, jdbcType=INTEGER},  <!-- unbalance_counts_ -->
			</if>
			<if test="only_our_side_counts_ != null">
		          only_our_side_counts_ = #{only_our_side_counts_, jdbcType=INTEGER},  <!-- only_our_side_counts_ -->
			</if>
			<if test="only_third_side_counts_ != null">
		          only_third_side_counts_ = #{only_third_side_counts_, jdbcType=INTEGER},  <!-- only_third_side_counts_ -->
			</if>
			<if test="patch_before_counts_ != null">
		          patch_before_counts_ = #{patch_before_counts_, jdbcType=INTEGER},  <!-- patch_before_counts_ -->
			</if>
			<if test="file_path_ != null">
		          file_path_ = #{file_path_, jdbcType=VARCHAR},  <!-- file_path_ -->
			</if>
			<if test="created_time_ != null">
		          created_time_ = #{created_time_, jdbcType=VARCHAR},  <!-- created_time_ -->
			</if>
			<if test="updated_time_ != null">
		          updated_time_ = #{updated_time_, jdbcType=VARCHAR},  <!-- updated_time_ -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM fc_reconciliation WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Fc_reconciliationPO">
		SELECT
		<include refid="column" />
		FROM fc_reconciliation WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Fc_reconciliationPO">
		SELECT
		    <include refid="column" />
		FROM fc_reconciliation
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Fc_reconciliationPO">
		SELECT
			<include refid="column" />	
		FROM fc_reconciliation
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Fc_reconciliationPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM fc_reconciliation
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Fc_reconciliationPO">
		SELECT
			<include refid="column" />	
		FROM fc_reconciliation
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Fc_reconciliationPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM fc_reconciliation
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM fc_reconciliation
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM fc_reconciliation
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- id_ -->
		  third_channel_id_,  <!-- third_channel_id_ -->
		  record_id_,  <!-- record_id_ -->
		  type_,  <!-- type_ -->
		  reconciliation_date_,  <!-- reconciliation_date_ -->
		  status_,  <!-- status_ -->
		  today_order_counts_,  <!-- today_order_counts_ -->
		  succeed_counts_,  <!-- succeed_counts_ -->
		  unbalance_counts_,  <!-- unbalance_counts_ -->
		  only_our_side_counts_,  <!-- only_our_side_counts_ -->
		  only_third_side_counts_,  <!-- only_third_side_counts_ -->
		  patch_before_counts_,  <!-- patch_before_counts_ -->
		  file_path_,  <!-- file_path_ -->
		  created_time_,  <!-- created_time_ -->
		  updated_time_  <!-- updated_time_ -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  fc_reconciliation.id_,  <!-- id_ -->
		  fc_reconciliation.third_channel_id_,  <!-- third_channel_id_ -->
		  fc_reconciliation.record_id_,  <!-- record_id_ -->
		  fc_reconciliation.type_,  <!-- type_ -->
		  fc_reconciliation.reconciliation_date_,  <!-- reconciliation_date_ -->
		  fc_reconciliation.status_,  <!-- status_ -->
		  fc_reconciliation.today_order_counts_,  <!-- today_order_counts_ -->
		  fc_reconciliation.succeed_counts_,  <!-- succeed_counts_ -->
		  fc_reconciliation.unbalance_counts_,  <!-- unbalance_counts_ -->
		  fc_reconciliation.only_our_side_counts_,  <!-- only_our_side_counts_ -->
		  fc_reconciliation.only_third_side_counts_,  <!-- only_third_side_counts_ -->
		  fc_reconciliation.patch_before_counts_,  <!-- patch_before_counts_ -->
		  fc_reconciliation.file_path_,  <!-- file_path_ -->
		  fc_reconciliation.created_time_,  <!-- created_time_ -->
		  fc_reconciliation.updated_time_  <!-- updated_time_ -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	   <if test="id_ != null ">
		      AND id_ = #{id_}  <!-- id_ -->
		</if>
	   <if test="third_channel_id_ != null ">
		      AND third_channel_id_ = #{third_channel_id_}  <!-- third_channel_id_ -->
		</if>
	   <if test="record_id_ != null ">
		      AND record_id_ = #{record_id_}  <!-- record_id_ -->
		</if>
	   <if test="type_ != null ">
		      AND type_ = #{type_}  <!-- type_ -->
		</if>
	   <if test="reconciliation_date_ != null ">
		      AND reconciliation_date_ = #{reconciliation_date_}  <!-- reconciliation_date_ -->
		</if>
	   <if test="status_ != null ">
		      AND status_ = #{status_}  <!-- status_ -->
		</if>
	   <if test="today_order_counts_ != null ">
		      AND today_order_counts_ = #{today_order_counts_}  <!-- today_order_counts_ -->
		</if>
	   <if test="succeed_counts_ != null ">
		      AND succeed_counts_ = #{succeed_counts_}  <!-- succeed_counts_ -->
		</if>
	   <if test="unbalance_counts_ != null ">
		      AND unbalance_counts_ = #{unbalance_counts_}  <!-- unbalance_counts_ -->
		</if>
	   <if test="only_our_side_counts_ != null ">
		      AND only_our_side_counts_ = #{only_our_side_counts_}  <!-- only_our_side_counts_ -->
		</if>
	   <if test="only_third_side_counts_ != null ">
		      AND only_third_side_counts_ = #{only_third_side_counts_}  <!-- only_third_side_counts_ -->
		</if>
	   <if test="patch_before_counts_ != null ">
		      AND patch_before_counts_ = #{patch_before_counts_}  <!-- patch_before_counts_ -->
		</if>
	    <if test="file_path_ != null and file_path_ != ''">
		      AND file_path_ = #{file_path_}  <!-- file_path_ -->
		</if>
	    <if test="created_time_ != null and created_time_ != ''">
		      AND created_time_ = #{created_time_}  <!-- created_time_ -->
		</if>
	    <if test="updated_time_ != null and updated_time_ != ''">
		      AND updated_time_ = #{updated_time_}  <!-- updated_time_ -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="file_path_ != null and file_path_ != ''">
		      AND file_path_ like '%${file_path_}%'  <!-- file_path_ -->
		</if>
	    <if test="created_time_ != null and created_time_ != ''">
		      AND created_time_ like '%${created_time_}%'  <!-- created_time_ -->
		</if>
	    <if test="updated_time_ != null and updated_time_ != ''">
		      AND updated_time_ like '%${updated_time_}%'  <!-- updated_time_ -->
		</if>
	</sql>
	
</mapper>