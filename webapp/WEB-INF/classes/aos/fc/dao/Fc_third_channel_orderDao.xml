<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- fc_third_channel_order[fc_third_channel_order]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2017-02-07 10:53:02 -->
<mapper namespace="aos.fc.dao.Fc_third_channel_orderDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id_" parameterType="Fc_third_channel_orderPO">
		INSERT INTO fc_third_channel_order (
		<if test="order_id_ != null and order_id_ != ''">
	         order_id_, <!-- order_id_ -->
		</if>
		<if test="third_channel_id_ != null">
	         third_channel_id_, <!-- third_channel_id_ -->
		</if>
		<if test="interface_code_ != null">
	         interface_code_, <!-- interface_code_ -->
		</if>
		<if test="interface_url_ != null and interface_url_ != ''">
	         interface_url_, <!-- interface_url_ -->
		</if>
		<if test="sent_time_ != null and sent_time_ != ''">
	         sent_time_, <!-- sent_time_ -->
		</if>
		<if test="sent_content_ != null and sent_content_ != ''">
	         sent_content_, <!-- sent_content_ -->
		</if>
	          id_
		)VALUES(
		<if test="order_id_ != null and order_id_ != ''">
	          #{order_id_, jdbcType=VARCHAR}, <!-- order_id_ -->
	    </if>
		<if test="third_channel_id_ != null">
	          #{third_channel_id_, jdbcType=INTEGER}, <!-- third_channel_id_ -->
	    </if>
		<if test="interface_code_ != null">
	          #{interface_code_, jdbcType=INTEGER}, <!-- interface_code_ -->
	    </if>
		<if test="interface_url_ != null and interface_url_ != ''">
	          #{interface_url_, jdbcType=VARCHAR}, <!-- interface_url_ -->
	    </if>
		<if test="sent_time_ != null and sent_time_ != ''">
	          #{sent_time_, jdbcType=VARCHAR}, <!-- sent_time_ -->
	    </if>
		<if test="sent_content_ != null and sent_content_ != ''">
	          #{sent_content_, jdbcType=VARCHAR}, <!-- sent_content_ -->
	    </if>
	          null
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll" useGeneratedKeys="true" keyProperty="id_" parameterType="Fc_third_channel_orderPO">
		INSERT INTO fc_third_channel_order (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=INTEGER},  <!-- id_ -->
		    #{order_id_, jdbcType=VARCHAR},  <!-- order_id_ -->
		    #{third_channel_id_, jdbcType=INTEGER},  <!-- third_channel_id_ -->
		    #{interface_code_, jdbcType=INTEGER},  <!-- interface_code_ -->
		    #{interface_url_, jdbcType=VARCHAR},  <!-- interface_url_ -->
		    #{sent_time_, jdbcType=VARCHAR},  <!-- sent_time_ -->
		    #{sent_content_, jdbcType=VARCHAR}  <!-- sent_content_ -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Fc_third_channel_orderPO">
		UPDATE fc_third_channel_order
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=INTEGER},  <!-- id_ -->
			</if>
			<if test="order_id_ != null">
		          order_id_ = #{order_id_, jdbcType=VARCHAR},  <!-- order_id_ -->
			</if>
			<if test="third_channel_id_ != null">
		          third_channel_id_ = #{third_channel_id_, jdbcType=INTEGER},  <!-- third_channel_id_ -->
			</if>
			<if test="interface_code_ != null">
		          interface_code_ = #{interface_code_, jdbcType=INTEGER},  <!-- interface_code_ -->
			</if>
			<if test="interface_url_ != null">
		          interface_url_ = #{interface_url_, jdbcType=VARCHAR},  <!-- interface_url_ -->
			</if>
			<if test="sent_time_ != null">
		          sent_time_ = #{sent_time_, jdbcType=VARCHAR},  <!-- sent_time_ -->
			</if>
			<if test="sent_content_ != null">
		          sent_content_ = #{sent_content_, jdbcType=VARCHAR},  <!-- sent_content_ -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM fc_third_channel_order WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Fc_third_channel_orderPO">
		SELECT
		<include refid="column" />
		FROM fc_third_channel_order WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Fc_third_channel_orderPO">
		SELECT
		    <include refid="column" />
		FROM fc_third_channel_order
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Fc_third_channel_orderPO">
		SELECT
			<include refid="column" />	
		FROM fc_third_channel_order
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Fc_third_channel_orderPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM fc_third_channel_order
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Fc_third_channel_orderPO">
		SELECT
			<include refid="column" />	
		FROM fc_third_channel_order
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Fc_third_channel_orderPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM fc_third_channel_order
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM fc_third_channel_order
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM fc_third_channel_order
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- id_ -->
		  order_id_,  <!-- order_id_ -->
		  third_channel_id_,  <!-- third_channel_id_ -->
		  interface_code_,  <!-- interface_code_ -->
		  interface_url_,  <!-- interface_url_ -->
		  sent_time_,  <!-- sent_time_ -->
		  sent_content_  <!-- sent_content_ -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  fc_third_channel_order.id_,  <!-- id_ -->
		  fc_third_channel_order.order_id_,  <!-- order_id_ -->
		  fc_third_channel_order.third_channel_id_,  <!-- third_channel_id_ -->
		  fc_third_channel_order.interface_code_,  <!-- interface_code_ -->
		  fc_third_channel_order.interface_url_,  <!-- interface_url_ -->
		  fc_third_channel_order.sent_time_,  <!-- sent_time_ -->
		  fc_third_channel_order.sent_content_  <!-- sent_content_ -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	   <if test="id_ != null ">
		      AND id_ = #{id_}  <!-- id_ -->
		</if>
	    <if test="order_id_ != null and order_id_ != ''">
		      AND order_id_ = #{order_id_}  <!-- order_id_ -->
		</if>
	   <if test="third_channel_id_ != null ">
		      AND third_channel_id_ = #{third_channel_id_}  <!-- third_channel_id_ -->
		</if>
	   <if test="interface_code_ != null ">
		      AND interface_code_ = #{interface_code_}  <!-- interface_code_ -->
		</if>
	    <if test="interface_url_ != null and interface_url_ != ''">
		      AND interface_url_ = #{interface_url_}  <!-- interface_url_ -->
		</if>
	    <if test="sent_time_ != null and sent_time_ != ''">
		      AND sent_time_ = #{sent_time_}  <!-- sent_time_ -->
		</if>
	    <if test="sent_content_ != null and sent_content_ != ''">
		      AND sent_content_ = #{sent_content_}  <!-- sent_content_ -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="order_id_ != null and order_id_ != ''">
		      AND order_id_ like '%${order_id_}%'  <!-- order_id_ -->
		</if>
	    <if test="interface_url_ != null and interface_url_ != ''">
		      AND interface_url_ like '%${interface_url_}%'  <!-- interface_url_ -->
		</if>
	    <if test="sent_time_ != null and sent_time_ != ''">
		      AND sent_time_ like '%${sent_time_}%'  <!-- sent_time_ -->
		</if>
	    <if test="sent_content_ != null and sent_content_ != ''">
		      AND sent_content_ like '%${sent_content_}%'  <!-- sent_content_ -->
		</if>
	</sql>
	
</mapper>