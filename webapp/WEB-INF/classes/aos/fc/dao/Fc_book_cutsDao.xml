<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- fc_book_cuts[fc_book_cuts]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2017-02-07 10:52:59 -->
<mapper namespace="aos.fc.dao.Fc_book_cutsDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id_" parameterType="Fc_book_cutsPO">
		INSERT INTO fc_book_cuts (
		<if test="contract_id_ != null">
	         contract_id_, <!-- 所属借款合同ID -->
		</if>
		<if test="category_id_ != null">
	         category_id_, <!-- 财务科目ID -->
		</if>
		<if test="cut_amount_ != null">
	         cut_amount_, <!-- 截留金额 -->
		</if>
		<if test="version_ != null">
	         version_, <!-- version_ -->
		</if>
	          id_
		)VALUES(
		<if test="contract_id_ != null">
	          #{contract_id_, jdbcType=INTEGER}, <!-- 所属借款合同ID -->
	    </if>
		<if test="category_id_ != null">
	          #{category_id_, jdbcType=INTEGER}, <!-- 财务科目ID -->
	    </if>
		<if test="cut_amount_ != null">
	          #{cut_amount_, jdbcType=NUMERIC}, <!-- 截留金额 -->
	    </if>
		<if test="version_ != null">
	          #{version_, jdbcType=INTEGER}, <!-- version_ -->
	    </if>
	          null
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll" useGeneratedKeys="true" keyProperty="id_" parameterType="Fc_book_cutsPO">
		INSERT INTO fc_book_cuts (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=INTEGER},  <!-- 截留账目ID -->
		    #{contract_id_, jdbcType=INTEGER},  <!-- 所属借款合同ID -->
		    #{category_id_, jdbcType=INTEGER},  <!-- 财务科目ID -->
		    #{cut_amount_, jdbcType=NUMERIC},  <!-- 截留金额 -->
		    #{version_, jdbcType=INTEGER}  <!-- version_ -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Fc_book_cutsPO">
		UPDATE fc_book_cuts
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=INTEGER},  <!-- 截留账目ID -->
			</if>
			<if test="contract_id_ != null">
		          contract_id_ = #{contract_id_, jdbcType=INTEGER},  <!-- 所属借款合同ID -->
			</if>
			<if test="category_id_ != null">
		          category_id_ = #{category_id_, jdbcType=INTEGER},  <!-- 财务科目ID -->
			</if>
			<if test="cut_amount_ != null">
		          cut_amount_ = #{cut_amount_, jdbcType=NUMERIC},  <!-- 截留金额 -->
			</if>
			<if test="version_ != null">
		          version_ = #{version_, jdbcType=INTEGER},  <!-- version_ -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM fc_book_cuts WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Fc_book_cutsPO">
		SELECT
		<include refid="column" />
		FROM fc_book_cuts WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Fc_book_cutsPO">
		SELECT
		    <include refid="column" />
		FROM fc_book_cuts
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Fc_book_cutsPO">
		SELECT
			<include refid="column" />	
		FROM fc_book_cuts
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Fc_book_cutsPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM fc_book_cuts
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Fc_book_cutsPO">
		SELECT
			<include refid="column" />	
		FROM fc_book_cuts
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Fc_book_cutsPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM fc_book_cuts
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM fc_book_cuts
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM fc_book_cuts
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- 截留账目ID -->
		  contract_id_,  <!-- 所属借款合同ID -->
		  category_id_,  <!-- 财务科目ID -->
		  cut_amount_,  <!-- 截留金额 -->
		  version_  <!-- version_ -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  fc_book_cuts.id_,  <!-- 截留账目ID -->
		  fc_book_cuts.contract_id_,  <!-- 所属借款合同ID -->
		  fc_book_cuts.category_id_,  <!-- 财务科目ID -->
		  fc_book_cuts.cut_amount_,  <!-- 截留金额 -->
		  fc_book_cuts.version_  <!-- version_ -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	   <if test="id_ != null ">
		      AND id_ = #{id_}  <!-- 截留账目ID -->
		</if>
	   <if test="contract_id_ != null ">
		      AND contract_id_ = #{contract_id_}  <!-- 所属借款合同ID -->
		</if>
	   <if test="category_id_ != null ">
		      AND category_id_ = #{category_id_}  <!-- 财务科目ID -->
		</if>
	   <if test="cut_amount_ != null ">
		      AND cut_amount_ = #{cut_amount_}  <!-- 截留金额 -->
		</if>
	   <if test="version_ != null ">
		      AND version_ = #{version_}  <!-- version_ -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	</sql>
	
</mapper>