<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- fc_customer[fc_customer]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2017-02-07 10:53:00 -->
<mapper namespace="aos.fc.dao.Fc_customerDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id_" parameterType="Fc_customerPO">
		INSERT INTO fc_customer (
		<if test="name_ != null and name_ != ''">
	         name_, <!-- 客户姓名 -->
		</if>
		<if test="customer_code_ != null and customer_code_ != ''">
	         customer_code_, <!-- customer_code_ -->
		</if>
		<if test="idcard_ != null and idcard_ != ''">
	         idcard_, <!-- 客户身份证 -->
		</if>
		<if test="cellphone_ != null and cellphone_ != ''">
	         cellphone_, <!-- 客户手机号 -->
		</if>
		<if test="platform_id_ != null">
	         platform_id_, <!-- 开户业务线 -->
		</if>
		<if test="created_time_ != null and created_time_ != ''">
	         created_time_, <!-- created_time_ -->
		</if>
		<if test="created_by_ != null">
	         created_by_, <!-- created_by_ -->
		</if>
	          id_
		)VALUES(
		<if test="name_ != null and name_ != ''">
	          #{name_, jdbcType=VARCHAR}, <!-- 客户姓名 -->
	    </if>
		<if test="customer_code_ != null and customer_code_ != ''">
	          #{customer_code_, jdbcType=VARCHAR}, <!-- customer_code_ -->
	    </if>
		<if test="idcard_ != null and idcard_ != ''">
	          #{idcard_, jdbcType=VARCHAR}, <!-- 客户身份证 -->
	    </if>
		<if test="cellphone_ != null and cellphone_ != ''">
	          #{cellphone_, jdbcType=VARCHAR}, <!-- 客户手机号 -->
	    </if>
		<if test="platform_id_ != null">
	          #{platform_id_, jdbcType=INTEGER}, <!-- 开户业务线 -->
	    </if>
		<if test="created_time_ != null and created_time_ != ''">
	          #{created_time_, jdbcType=VARCHAR}, <!-- created_time_ -->
	    </if>
		<if test="created_by_ != null">
	          #{created_by_, jdbcType=INTEGER}, <!-- created_by_ -->
	    </if>
	          null
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll" useGeneratedKeys="true" keyProperty="id_" parameterType="Fc_customerPO">
		INSERT INTO fc_customer (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=INTEGER},  <!-- 客户ID -->
		    #{name_, jdbcType=VARCHAR},  <!-- 客户姓名 -->
		    #{customer_code_, jdbcType=VARCHAR},  <!-- customer_code_ -->
		    #{idcard_, jdbcType=VARCHAR},  <!-- 客户身份证 -->
		    #{cellphone_, jdbcType=VARCHAR},  <!-- 客户手机号 -->
		    #{platform_id_, jdbcType=INTEGER},  <!-- 开户业务线 -->
		    #{created_time_, jdbcType=VARCHAR},  <!-- created_time_ -->
		    #{created_by_, jdbcType=INTEGER}  <!-- created_by_ -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Fc_customerPO">
		UPDATE fc_customer
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=INTEGER},  <!-- 客户ID -->
			</if>
			<if test="name_ != null">
		          name_ = #{name_, jdbcType=VARCHAR},  <!-- 客户姓名 -->
			</if>
			<if test="customer_code_ != null">
		          customer_code_ = #{customer_code_, jdbcType=VARCHAR},  <!-- customer_code_ -->
			</if>
			<if test="idcard_ != null">
		          idcard_ = #{idcard_, jdbcType=VARCHAR},  <!-- 客户身份证 -->
			</if>
			<if test="cellphone_ != null">
		          cellphone_ = #{cellphone_, jdbcType=VARCHAR},  <!-- 客户手机号 -->
			</if>
			<if test="platform_id_ != null">
		          platform_id_ = #{platform_id_, jdbcType=INTEGER},  <!-- 开户业务线 -->
			</if>
			<if test="created_time_ != null">
		          created_time_ = #{created_time_, jdbcType=VARCHAR},  <!-- created_time_ -->
			</if>
			<if test="created_by_ != null">
		          created_by_ = #{created_by_, jdbcType=INTEGER},  <!-- created_by_ -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM fc_customer WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Fc_customerPO">
		SELECT
		<include refid="column" />
		FROM fc_customer WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Fc_customerPO">
		SELECT
		    <include refid="column" />
		FROM fc_customer
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Fc_customerPO">
		SELECT
			<include refid="column" />	
		FROM fc_customer
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Fc_customerPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM fc_customer
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Fc_customerPO">
		SELECT
			<include refid="column" />	
		FROM fc_customer
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Fc_customerPO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM fc_customer
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM fc_customer
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM fc_customer
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- 客户ID -->
		  name_,  <!-- 客户姓名 -->
		  customer_code_,  <!-- customer_code_ -->
		  idcard_,  <!-- 客户身份证 -->
		  cellphone_,  <!-- 客户手机号 -->
		  platform_id_,  <!-- 开户业务线 -->
		  created_time_,  <!-- created_time_ -->
		  created_by_  <!-- created_by_ -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  fc_customer.id_,  <!-- 客户ID -->
		  fc_customer.name_,  <!-- 客户姓名 -->
		  fc_customer.customer_code_,  <!-- customer_code_ -->
		  fc_customer.idcard_,  <!-- 客户身份证 -->
		  fc_customer.cellphone_,  <!-- 客户手机号 -->
		  fc_customer.platform_id_,  <!-- 开户业务线 -->
		  fc_customer.created_time_,  <!-- created_time_ -->
		  fc_customer.created_by_  <!-- created_by_ -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	   <if test="id_ != null ">
		      AND id_ = #{id_}  <!-- 客户ID -->
		</if>
	    <if test="name_ != null and name_ != ''">
		      AND name_ = #{name_}  <!-- 客户姓名 -->
		</if>
	    <if test="customer_code_ != null and customer_code_ != ''">
		      AND customer_code_ = #{customer_code_}  <!-- customer_code_ -->
		</if>
	    <if test="idcard_ != null and idcard_ != ''">
		      AND idcard_ = #{idcard_}  <!-- 客户身份证 -->
		</if>
	    <if test="cellphone_ != null and cellphone_ != ''">
		      AND cellphone_ = #{cellphone_}  <!-- 客户手机号 -->
		</if>
	   <if test="platform_id_ != null ">
		      AND platform_id_ = #{platform_id_}  <!-- 开户业务线 -->
		</if>
	    <if test="created_time_ != null and created_time_ != ''">
		      AND created_time_ = #{created_time_}  <!-- created_time_ -->
		</if>
	   <if test="created_by_ != null ">
		      AND created_by_ = #{created_by_}  <!-- created_by_ -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="name_ != null and name_ != ''">
		      AND name_ like '%${name_}%'  <!-- 客户姓名 -->
		</if>
	    <if test="customer_code_ != null and customer_code_ != ''">
		      AND customer_code_ like '%${customer_code_}%'  <!-- customer_code_ -->
		</if>
	    <if test="idcard_ != null and idcard_ != ''">
		      AND idcard_ like '%${idcard_}%'  <!-- 客户身份证 -->
		</if>
	    <if test="cellphone_ != null and cellphone_ != ''">
		      AND cellphone_ like '%${cellphone_}%'  <!-- 客户手机号 -->
		</if>
	    <if test="created_time_ != null and created_time_ != ''">
		      AND created_time_ like '%${created_time_}%'  <!-- created_time_ -->
		</if>
	</sql>
	
</mapper>