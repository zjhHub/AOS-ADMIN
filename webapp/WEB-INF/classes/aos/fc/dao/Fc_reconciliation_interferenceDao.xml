<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- fc_reconciliation_interference[fc_reconciliation_interference]SQL自动映射 -->
<!--  注意:此文件由AOS平台自动生成-禁止手工修改 2017-02-17 10:39:11 -->
<mapper namespace="aos.fc.dao.Fc_reconciliation_interferenceDao">
	
	<!-- 插入一个数据持久化对象(插入字段为传入PO实体的非空属性) -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id_" parameterType="Fc_reconciliation_interferencePO">
		INSERT INTO fc_reconciliation_interference (
		<if test="reconciliation_detail_id_ != null">
	         reconciliation_detail_id_, <!-- reconciliation_detail_id_ -->
		</if>
		<if test="error_reason != null">
	         error_reason, <!-- error_reason -->
		</if>
		<if test="error_description != null and error_description != ''">
	         error_description, <!-- error_description -->
		</if>
		<if test="correction_person != null and correction_person != ''">
	         correction_person, <!-- correction_person -->
		</if>
		<if test="correction_solution != null and correction_solution != ''">
	         correction_solution, <!-- correction_solution -->
		</if>
		<if test="remark != null and remark != ''">
	         remark, <!-- remark -->
		</if>
		<if test="created_time_ != null and created_time_ != ''">
	         created_time_, <!-- created_time_ -->
		</if>
	          id_
		)VALUES(
		<if test="reconciliation_detail_id_ != null">
	          #{reconciliation_detail_id_, jdbcType=INTEGER}, <!-- reconciliation_detail_id_ -->
	    </if>
		<if test="error_reason != null">
	          #{error_reason, jdbcType=INTEGER}, <!-- error_reason -->
	    </if>
		<if test="error_description != null and error_description != ''">
	          #{error_description, jdbcType=VARCHAR}, <!-- error_description -->
	    </if>
		<if test="correction_person != null and correction_person != ''">
	          #{correction_person, jdbcType=VARCHAR}, <!-- correction_person -->
	    </if>
		<if test="correction_solution != null and correction_solution != ''">
	          #{correction_solution, jdbcType=VARCHAR}, <!-- correction_solution -->
	    </if>
		<if test="remark != null and remark != ''">
	          #{remark, jdbcType=VARCHAR}, <!-- remark -->
	    </if>
		<if test="created_time_ != null and created_time_ != ''">
	          #{created_time_, jdbcType=VARCHAR}, <!-- created_time_ -->
	    </if>
	          null
		)
	</insert>
	
	<!-- 插入一个数据持久化对象(含所有字段) -->
	<insert id="insertAll" useGeneratedKeys="true" keyProperty="id_" parameterType="Fc_reconciliation_interferencePO">
		INSERT INTO fc_reconciliation_interference (
		    <include refid="column" />
		)
		VALUES (
		    #{id_, jdbcType=INTEGER},  <!-- id_ -->
		    #{reconciliation_detail_id_, jdbcType=INTEGER},  <!-- reconciliation_detail_id_ -->
		    #{error_reason, jdbcType=INTEGER},  <!-- error_reason -->
		    #{error_description, jdbcType=VARCHAR},  <!-- error_description -->
		    #{correction_person, jdbcType=VARCHAR},  <!-- correction_person -->
		    #{correction_solution, jdbcType=VARCHAR},  <!-- correction_solution -->
		    #{remark, jdbcType=VARCHAR},  <!-- remark -->
		    #{created_time_, jdbcType=VARCHAR}  <!-- created_time_ -->
		)
	</insert>

	<!-- 根据主键修改数据持久化对象 -->
	<update id="updateByKey" parameterType="Fc_reconciliation_interferencePO">
		UPDATE fc_reconciliation_interference
		<set>
			<if test="id_ != null">
		          id_ = #{id_, jdbcType=INTEGER},  <!-- id_ -->
			</if>
			<if test="reconciliation_detail_id_ != null">
		          reconciliation_detail_id_ = #{reconciliation_detail_id_, jdbcType=INTEGER},  <!-- reconciliation_detail_id_ -->
			</if>
			<if test="error_reason != null">
		          error_reason = #{error_reason, jdbcType=INTEGER},  <!-- error_reason -->
			</if>
			<if test="error_description != null">
		          error_description = #{error_description, jdbcType=VARCHAR},  <!-- error_description -->
			</if>
			<if test="correction_person != null">
		          correction_person = #{correction_person, jdbcType=VARCHAR},  <!-- correction_person -->
			</if>
			<if test="correction_solution != null">
		          correction_solution = #{correction_solution, jdbcType=VARCHAR},  <!-- correction_solution -->
			</if>
			<if test="remark != null">
		          remark = #{remark, jdbcType=VARCHAR},  <!-- remark -->
			</if>
			<if test="created_time_ != null">
		          created_time_ = #{created_time_, jdbcType=VARCHAR},  <!-- created_time_ -->
			</if>
		</set>
		WHERE  id_ = #{id_}
	</update>
	
	<!-- 根据主键删除数据持久化对象 -->
	<delete id="deleteByKey">
		DELETE FROM fc_reconciliation_interference WHERE  id_ = #{id_}
	</delete>

	<!-- 根据主键查询并返回数据持久化对象 -->
	<select id="selectByKey" resultType="Fc_reconciliation_interferencePO">
		SELECT
		<include refid="column" />
		FROM fc_reconciliation_interference WHERE  id_ = #{id_}
	</select>

	<!-- 根据唯一组合条件查询并返回数据持久化对象 -->
	<select id="selectOne" parameterType="Dto" resultType="Fc_reconciliation_interferencePO">
		SELECT
		    <include refid="column" />
		FROM fc_reconciliation_interference
		<where>
		    <include refid="equal" />
		</where>		
	</select>

	<!-- 根据Dto查询并返回数据持久化对象集合 -->
	<select id="list" parameterType="Dto" resultType="Fc_reconciliation_interferencePO">
		SELECT
			<include refid="column" />	
		FROM fc_reconciliation_interference
		<where>
		    <include refid="equal" />
		</where>	
	</select>

	<!-- 根据Dto查询并返回分页数据持久化对象集合 -->
	<select id="listPage" parameterType="Dto" resultType="Fc_reconciliation_interferencePO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM fc_reconciliation_interference
		<where>
		    <include refid="equal" />
		</where>	
	</select>
	
	<!-- 根据Dto模糊查询并返回数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="like" parameterType="Dto" resultType="Fc_reconciliation_interferencePO">
		SELECT
			<include refid="column" />	
		FROM fc_reconciliation_interference
		<where>
		    <include refid="like" />
		</where>	
	</select>

	<!-- 根据Dto模糊查询并返回分页数据持久化对象集合(字符型字段模糊匹配，其余字段精确匹配) -->
	<select id="likePage" parameterType="Dto" resultType="Fc_reconciliation_interferencePO" useCache="false">
	    SELECT
			<include refid="column" />	
		FRoM fc_reconciliation_interference
		<where>
		    <include refid="like" />
		</where>	
	</select>
	
	<!-- 根据Dto统计行数 -->
	<select id="rows" resultType="Integer" parameterType="Dto">
		SELECT COUNT(1) AS aos_rows_ FROM fc_reconciliation_interference
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 根据数学表达式进行数学运算 -->
	<select id="calc" parameterType="Dto" resultType="String">
		SELECT
			${_expr}
		FROM fc_reconciliation_interference
		<where>
		    <include refid="equal" />
		</where>
	</select>
	
	<!-- 表字段 -->
	<sql id="column">
		  id_,  <!-- id_ -->
		  reconciliation_detail_id_,  <!-- reconciliation_detail_id_ -->
		  error_reason,  <!-- error_reason -->
		  error_description,  <!-- error_description -->
		  correction_person,  <!-- correction_person -->
		  correction_solution,  <!-- correction_solution -->
		  remark,  <!-- remark -->
		  created_time_  <!-- created_time_ -->
	</sql>
	
	<!-- 表字段(用于外表的关联时引用) -->
	<sql id="column2">
		  fc_reconciliation_interference.id_,  <!-- id_ -->
		  fc_reconciliation_interference.reconciliation_detail_id_,  <!-- reconciliation_detail_id_ -->
		  fc_reconciliation_interference.error_reason,  <!-- error_reason -->
		  fc_reconciliation_interference.error_description,  <!-- error_description -->
		  fc_reconciliation_interference.correction_person,  <!-- correction_person -->
		  fc_reconciliation_interference.correction_solution,  <!-- correction_solution -->
		  fc_reconciliation_interference.remark,  <!-- remark -->
		  fc_reconciliation_interference.created_time_  <!-- created_time_ -->
	</sql>

	<!-- Where精确匹配字段 -->
	<sql id="equal">
	   <if test="id_ != null ">
		      AND id_ = #{id_}  <!-- id_ -->
		</if>
	   <if test="reconciliation_detail_id_ != null ">
		      AND reconciliation_detail_id_ = #{reconciliation_detail_id_}  <!-- reconciliation_detail_id_ -->
		</if>
	   <if test="error_reason != null ">
		      AND error_reason = #{error_reason}  <!-- error_reason -->
		</if>
	    <if test="error_description != null and error_description != ''">
		      AND error_description = #{error_description}  <!-- error_description -->
		</if>
	    <if test="correction_person != null and correction_person != ''">
		      AND correction_person = #{correction_person}  <!-- correction_person -->
		</if>
	    <if test="correction_solution != null and correction_solution != ''">
		      AND correction_solution = #{correction_solution}  <!-- correction_solution -->
		</if>
	    <if test="remark != null and remark != ''">
		      AND remark = #{remark}  <!-- remark -->
		</if>
	    <if test="created_time_ != null and created_time_ != ''">
		      AND created_time_ = #{created_time_}  <!-- created_time_ -->
		</if>
	</sql>
	
	<!-- Where模糊匹配字段 -->
	<sql id="like">
	    <if test="error_description != null and error_description != ''">
		      AND error_description like '%${error_description}%'  <!-- error_description -->
		</if>
	    <if test="correction_person != null and correction_person != ''">
		      AND correction_person like '%${correction_person}%'  <!-- correction_person -->
		</if>
	    <if test="correction_solution != null and correction_solution != ''">
		      AND correction_solution like '%${correction_solution}%'  <!-- correction_solution -->
		</if>
	    <if test="remark != null and remark != ''">
		      AND remark like '%${remark}%'  <!-- remark -->
		</if>
	    <if test="created_time_ != null and created_time_ != ''">
		      AND created_time_ like '%${created_time_}%'  <!-- created_time_ -->
		</if>
	</sql>
	
</mapper>